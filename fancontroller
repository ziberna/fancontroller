#!/bin/bash
#
#    Copyright (C) 2011  Jure Å½iberna
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.
#    If not, see http://www.gnu.org/licenses/agpl.html.

# interval in seconds
INTERVAL=5

# paths
PWM_PATH="/sys/devices/platform/thinkpad_hwmon/pwm1"
TEMP_PATH="/sys/devices/platform/thinkpad_hwmon/temp1_input"

# min speed at max temp
PWMmax=245
# max speed at min temp
PWMmin=10

# max temp
Tmax=55
# min temp
Tmin=20

function am_i_root() {
    if [ "$(whoami)" != "root" ]; then
        echo "You need to be root to do this."
        exit 1
    fi
}

function pwm() {
    if [ ! -f "${PWM_PATH}" ]; then
        echo "0"
    elif [ "$1" != "" ]; then
        echo "$1" > "${PWM_PATH}"
    else
        echo $(cat "${PWM_PATH}")
    fi
}

function pwm_enable() {
    if [ ! -f "${PWM_PATH}_enable" ]; then
        echo "1"
    elif [ "$1" != "" ]; then
        echo "$1" > "${PWM_PATH}_enable"
    else
        echo $(cat "${PWM_PATH}_enable")
    fi
}

function temp() {
    if [ ! -f "${TEMP_PATH}" ]; then
        echo "-1"
    else
        echo $(cat "${TEMP_PATH}")
    fi
}

function fancontrol_running() {
    if [ -f "/var/run/fancontrol.pid" ] && [ -f "/var/run/daemons/fancontrol" ]; then
        return 0
    else
        return 1
    fi
}

function babysitter() {
    tries=0
    until fancontrol_running && [ "$(pwm_enable)" == "1" ]
    do
        rc.d restart fancontrol > /dev/null
        tries=$((++tries))
        if [ "$((tries % 10))" == "0" ]; then
            echo "Fancontroller babysitter status: tried ${tries} time(s)."
        fi
        sleep 1
    done
}

function rouge() {
    tries=0
    until pwm_sanity && ( [ "$1" != "until-fancontrol" ] || fancontrol_running ) && [ "$1" != "indefinite" ]
    do
        sleep "$INTERVAL"
    done
}

function pwm_sanity() {
    if [ "$(pwm_enable)" != "1" ]; then
        pwm_enable "1"
    fi
    T=$(temp)
    if [ "$T" -lt "0" ]; then
	return 0
    fi
    T=$((T/1000))
    Trate=$((((T-Tmin)*1000)/(Tmax-Tmin)))
    PWM=$(((Trate*(PWMmax-PWMmin))/1000+PWMmin))
    if [ "$PWM" -lt "$PWMmin" ]; then
        pwm "$PWMmin"
        return 1
    elif [ "$PWM" -gt "$PWMmax" ]; then
        pwm "$PWMmax"
        return 1
    fi
    pwm "$PWM"
    return 0
}

function disable() {
    if fancontrol_running; then
        rc.d stop fancontrol > /dev/null
    fi
    pwm_enable "0"
    killall -e fancontroller
}

function ac_speed() {
    sudo cp /etc/fancontrol.ac /etc/fancontrol
    rc.d restart fancontrol
}

function batt_speed() {
    sudo cp /etc/fancontrol.batt /etc/fancontrol
    rc.d restart fancontrol
}

am_i_root

case "$1" in
    "babysitter")
        babysitter
        ;;
    "rouge")
        rouge "$2"
        ;;
    "disable")
        disable
        ;;
    "ac-speed")
        ac_speed
        ;;
    "batt-speed")
        batt_speed
        ;;
    *)
        echo "Usage: fancontroller [babysitter | rouge [ | until-fancontrol | indefinite] | ac-speed | batt-speed]"
	;;
esac

exit 0
